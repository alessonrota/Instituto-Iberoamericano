# -*- coding: utf-8 -*-
"""Ibero Americana.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13obLP6edq5fBnkqfZietNGV5vZ-Te-7s

Base de dados Ibero Americana
"""

from requests_html import HTMLSession
import folder

# Domain URLs for the website and the images
DOMAIN = 'https://digital.iai.spk-berlin.de/viewer/api/v1/records/'
SHORT_DOMAIN = 'https://digital.iai.spk-berlin.de/viewer/image/'

# Default size of the image
SIZE = '.tif/full/2048,/0/default.jpg'

# Directory where the downloaded images will be saved
parent_dir = "G:/Banco de dados/Base de dados/new germany restantes/alema"

# User agent string used for the request headers
DEFAULT_USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36'

# Start a session and set the user agent string in the request headers
session = HTMLSession()
headers = {'User-Agent': DEFAULT_USER_AGENT}

# Load the list of books from the folder module
books = folder.load_books()

# Start page number for the book
start = 0

# Function to generate the URL for a page of the book
def setup_url(bookId, index):
    images = bookId + '/files/images/'
    page = start + index
    url = DOMAIN + images + str(page).zfill(8) + SIZE
    return url

# Function to get the number of pages in a book
def get_number_of_pages(bookId):
    url = SHORT_DOMAIN + str(bookId)
    response = session.get(url, headers=headers)
    response.html.render()
    number_of_pages = response.html.find('.navigate_last')
    print("Número de páginas: ", number_of_pages[0].text)
    return int(number_of_pages[0].text)

# Function to download a page of the book and save it as an image file
def download_image(bookId, url, page):
    print("Baixando Página: ", page)
    response = session.get(url, headers=headers)
    response.html.render()
    img = response.html.find('img')
    with open('./alema/' + bookId + '/page-' + str(page).zfill(3) + '.jpg', 'wb') as w:
        w.write(response.content)

# Function to download all pages of a book
def download_book(bookId):
    print("\nBaixando livro: ", bookId)
    pagesWithError = []
    folder.create_folder(bookId)
    config = books.get(bookId)
    # numberOfPages = config[0];
    numberOfPages = get_number_of_pages(bookId)
    numberOfPages = numberOfPages + 1
    for index in range(1, numberOfPages):
        url = setup_url(bookId, index)
        try:
            download_image(bookId, url, index)
        except Exception as e:
            print(e)
            pagesWithError.append(index)

    print("\n\nPáginas com erro: ", pagesWithError)
    print("\n")
    while len(pagesWithError) > 0:
        print("Número de páginas restantes: ", len(pagesWithError))
        index = pagesWithError.pop()
        url = setup_url(bookId, index)
        try:
            download_image(bookId, url, index)
        except Exception as e:
            pagesWithError.append(index)

# Loop through all the books and download them
for bookId in books:
    download_book(bookId)